# Danh sách thiết bị:
    Công tắc
        Công tắc Homegy
        Công tắc rèm
    Đèn
        Đèn HG Skylight
        Đèn CT Rạng đông
        Đèn RGB Rạng đông
    Cảm biến
        Cảm biến cửa: trạng thái cửa đóng/mở, trạng thái cảm biến đã được gắn lên tường hay chưa, % pin
        Cảm biến khói: có khói hay không, % pin
        Cảm biến nhiệt độ/độ ẩm
        Cảm biến chuyển động

# Danh sách bản tin BLE:
    Bản tin báo trạng thái của thiết bị khi người dùng nhấn nút (công tắc):
        8204 0000 ss 0000 ll 0000: ss => trạng thái bật tắt (00 hoặc 01), ll => độ sáng của LED (00 - 64)
    Bản tin điều khiển on/off thiết bị từ HC có phản hồi (công tắc, đèn):
        Request: E8FF 000000000000 adad 8202 ss: adad => địa chỉ của hạt công tắc hoặc đèn, ss => trạng thái bật tắt (00, 01)
        Response: 8204 8202 ss 0000 ll 0000: ss => trạng thái bật tắt (00 hoặc 01), ll => độ sáng của LED (00 - 64)
    Bản tin điều khiển độ sáng, nhiệt độ màu của đèn CCT, RGB:
        Request: E8FF 00000000 02 00 adad 825E 18 64 40 3D
        Response: 8260 <4 bytes old lightness, color> <4 bytes new lightness, color> <1 remaining byte>

# Chức năng lưu lịch sử hoạt động
    Các thông tin thiết bị cần lưu:
        Thay đổi giá trị dp
        Thay đổi trạng thái online/offline
        Thêm/xóa thiết bị
        Khóa trẻ em
        Khóa hãng
        Thời gian
        Nguyên nhân làm thay đổi trạng thái (senderId nếu điều khiển từ app, sceneId nếu điều khiển từ kịch bản)
    Thông tin của từng lịch sử:
        time: Số milliseconds tính từ năm 01/01/1970
        eventType: Loại sự kiện của lịch sử:
            1: Thiết bị thay đổi giá trị dp
            2: Thiết bị online/offline (dpValue = 0: thiết bị offline, dpValue = 1: Thiết bị online)
            3: Thêm thiết bị
            4: Xoá thiết bị
            5: Khóa trẻ em (dpValue là index của hạt bị khóa (1, 2, 3, 4))
            6: Khóa hãng
            7: Thay đổi trạng thái của nhóm liên động hoặc nhóm đèn
            8: Scene được kích hoạt
            9: Enable/disable scene
        causeType: Nguyên nhân làm thay đổi sự kiện
            0: Người dùng bật tắt trực tiếp từ thiết bị
            1: Người dùng điều khiển từ app, trong trường hợp này causeId sẽ chứa senderId tác động
            2: Có nhóm đèn hoặc nhóm công tắc tác động, trong trường hợp này causeId sẽ chứa groupId tác động
            3: Có scene tác động, trong trường hợp này causeId sẽ chứa sceneId tác động
            4: HC chủ động đồng bộ trạng thái của thiết bị
        causeId: chứa senderId, groupId hoặc sceneId tùy theo causeType
        deviceId: Id của thiết bị



# Chức năng enable/disable kịch bản:
    Kịch bản MANUAL: Không tắt được => khi nhận được request TYPE_CTR_SCENE thì luôn chạy kịch bản
    Kịch bản Auto: Không chạy được từ trên app => Khi nhận được request TYPE_CTR_SCENE thì luôn enable/disable kịch bản dựa vào trường 'state' gửi xuống

# Chức năng update kịch bản:
    Với kịch bản HC chỉ cần lưu lại thông tin kịch bản mới vào database
    Với kịch bản LC:
        Update actions:
            Xóa hết các actions cũ mà không có trong list actions mới
            Add các actions mới mà không có trong list actions cũ


# Những hàm cần phải free memory giá trị trả về:
    JSON_Parse()
    JSON_CreateObject()
    JSON_CreateArray()
    cJSON_Print()
    cJSON_PrintUnformatted()
    List_Create()
    String_Split()



[x] Enable/Disable kịch bản local
[x] Tính năng control kịch bản wifi
[x] Thêm pageIndex để quản lý danh sách thiết bị, nhóm, scene theo nhiều page
[x] Tính năng thay HC
[x] Tính năng chạy 2 Gateway trên 1 HC
[x] Tính năng đồng bộ database giữa HC và cloud
[] Tính năng OTA cho HC, Gateway
[] Xử lý điều kiện lớn hơn, nhỏ hơn của kịch bản HC cho cảm biến
[] Tính năng set độ sáng cho hạt công tắc Homegy
[] Tính năng ping HC từ app
[] Tính năng scan trạng thái của thiết bị (công tắc, đèn) lúc rảnh

[] Tích hợp các thiết bị Homekit vào HC
[] Tính năng cài đặt wifi, HomeID cho HC
[] Tính năng chạy nhiều HC trong 1 nhà
[] Thêm chức năng của loa và nút nhấn cho HC
[] Test tải cho HC
[] Tạo file image nạp cho HC, chỉ cần nạp file này xuống board là HC sẽ chạy luôn mà không cần cài đặt gì thêm


1 page sẽ có các topics:
    /get : dùng để yêu cầu aws đẩy toàn bộ data của page vào topic /get/accepted
    /get/accepted : dùng để nhận toàn bộ data của page khi có ai đó publish vào topic /get
    /update : dùng để update 1 phần data của page
    /update/accepted: dùng để nhận thông tin khi có page có thay data

Danh sách các page:
    MAIN
    DEVICE (pageIndex0)
    SCENE  (pageIndex2)
    GROUP  (pageIndex3)


Tính năng gộp bản tin update thiết bị trước khi đẩy lên aws:
    Khi thực hiện các chức năng như điều khiển nhóm, chạy kịch bản,... sẽ có rất nhiều thiết
    bị thực hiện đồng thời và gửi bản tin báo trạng thái thiết bị về HC cùng 1 lúc. Lúc này
    HC cần thực hiện gộp các bản tin lại để tránh gửi quá nhiều bản tin lên cloud cùng lúc.
    Tính năng này sẽ thực hiện trên service AWS như sau:
        - Dùng 1 JSON object g_mergePayloads để lưu trữ toàn các bản tin update device do
          service CORE gửi lên. object này có cấu trúc như sau:
            {
                "1": {
                    "A4C1383C8031": {"state": 2, "dictDPs" : {"1":1, "2":0, "3":1}},
                    "A4C1383C8032": {"state": 2, "dictDPs" : {"1":1, "2":0, "3":1}}
                },
                "2": {
                    "A4C1383C8033": {"state": 2, "dictDPs" : {"1":1, "2":0, "3":1}},
                    "A4C1383C8034": {"state": 2, "dictDPs" : {"1":1, "2":0, "3":1}}
                },
            }
        - Mỗi khi có bản tin do service CORE gửi lên, service AWS sẽ gộp các bản tin này theo
          từng pageIndex và từng deviceId theo cấu trúc trên.
        - Dùng 1 task Aws_SendMergePayload chạy mỗi 300ms để đọc và gửi tất cả các bản tin
          trong object g_mergePayloads lên cloud


Tính năng IR:
    1. Thao tác dữ liệu vùng nhớ  --> Device xử lý

    2. Lệnh phát hồng ngoại theo dữ liệu vùng nhớ --> có phản hồi( đợi Quân bổ sung)
    3. Lệnh phát hồng ngoại theo hàm điều khiển điều hòa --> phát theo hàm arduino ( chỉ dùng cho điều hòa), có phản hồi( đợi Quân bổ sung)

    4. Lệnh cài đặt nhận diện điều khiển và khẩu lệnh --> gán nhãn điều khiển cho thiết bị, để nhận phản hồi khi thay đổi | khẩu lệnh : 30 độ ứng với điều hòa nào (có phàn hồi lệnh 10)
    5. Lệnh xử lý tự học --->(setup) dùng tự học : vùng nhớ (2:20 tự lưu) (có phản hồi, lệnh 11)

    6. Lệnh cài đặt kịch bản LC --> có phản hồi( đợi Quân bổ sung)

    7. Lệnh cài đặt mạng wifi --> check lại với a Sỹ ( 32byte max)
    8 Lệnh cập nhật phần mềm --> có phản hồi( đợi Quân bổ sung)
    10. Phản hồi thông tin nhận diện hồng ngoại và giọng nói --> phản hồi cho lệnh 4
    11. Phản hồi trạng thái tự học---> phản hồi cho lệnh 5
    12. Cài đặt câu lệnh wakeup  --> có phản hồi( đợi Quân bổ sung)


    13. Lệnh cài đặt địa chỉ gateway -->APP xử lý
    17. Phản hồi trạng thái lưu địa chỉ gateway -->APP xử lý
    14. Lệnh kích hoạt thiết bị -->APP xử lý
    18. Phản hồi trạng thái kích hoạt thiết bị -->APP xử lý


    15. Lệnh mở/khóa hãng  --> có phản hồi( đợi Quân bổ sung)
    16. Lệnh mở/khóa người dùng(khóa trẻ em) --> có phản hồi
    19. Phản hồi trạng thái người dùng --> phản hồi cho lệnh 16
    20. Phải hồi kịch bản gióng nói LC --> phản hồi ID kịch bản được gọi từ giọng nói



    Các bước thêm thiết bị IR:
        1. cài đặt địa chỉ gateway và  kích hoạt thiết bị
            ( đã có thể chạy được lệnh 2,3)
        2. VOICE: Đã có wakeup mặc định là (NHẬN DIỆN GIỌNG NÓI)
            2.1 Cài đặt nhận diện điều khiển và khẩu lệnh (A Sỹ chưa làm)
        3. TỰ học
            3.1 Lệnh xử lý tự học
        4. KỊch bản:
            4.1 Cài đặt kịch bản LC
            4.2 kịch bản gióng nói LC
        5. OTA
            5.1 Cài wifi
            5.2 Lệnh 8 cập nhật phần mềm


        Them dieu hoa
        {"state":{"reported":{"1681781011704":{"name":"Điều hoà","devices":"2|BLEHGAA0304|C049EF6A0C16|B206|B65195EFF91583B86CF09C6DD144985F|","parentID":"C049EF6A0C16","gateWay":"A000","dictDPs":{"4":true,"105":3,"103":0,"102":1,"106":"00000000","1":114,"3":3,"101":false,"104":2,"2":1},"dictMeta":{"3":"B206","104":"B206","101":"B206","105":"B206","4":"B206","102":"B206","103":"B206","106":"B206","1":"B206","2":"B206"},"led":1,"state":2},"pageIndex":1,"type":2,"sender":1,"senderid":"42C8FACD-C854-43C9-7959-FA3B527F81CB"}}}

        DK dieuf hòa
        {"state":{"reported":{"1681781011704":{"dictDPs":{"3":1,"2":1,"1":24,"102":2,"103":18,"105":3,"101":false,"104":2}},"type":4,"senderid":"36EB581C-F0F0-4DFD-BF71-34AC18D4DAB1","provider":2,"sender":1}}}

        Lệnh cài đặt nhận diện điều khiển và khẩu lệnh (Mã 0x04)




        Thư viện : chỉ diều hòa
        Vùng nhớ : điều hòa, tivi, quạt

        "1": "BrandId",
        "2": "RemoteId",
        "3": "Type Command", (1: điều khiển qua thư viện - lệnh 3 của IR, 2: điều khiển theo vùng nhớ - lệnh 2 của IR)
        "4": "Voice",
        "101": "OnOff",
        "102": "Mode",
        "103": "Temp",
        "104": "Fan",
        "105": "Swing",
        "106": "Command"


        Lệnh 3: E8 FF 00 00 00 00 00 00 ad ad E4 11 02 00 00 03 18 00 01 19 02

        Lệnh 4: 04 02 05 18 00 01 00 00
                04 02 03 18 00 01 00 00



# Cấu hình serveo để ssh từ xa (qua mạng internet)
    Copy file serveo.service vào thư mục /etc/systemd/system
    Sửa lại alias trong file này với giá trị khác (nên tạo ngẫu nhiên để đảm bảo không bị trùng)
    Chạy các lệnh sau:
        systemctl daemon-reload
        systemctl enable serveo.service
        systemctl start serveo.service
        systemctl status serveo.service
    SSH vào board bằng lệnh sau:
        ssh -J serveo.net root@homegy_jhskfhallas7624923


# Chỉnh sửa crontab để reset thiết bị hằng ngày và check network
    File crontabs được lưu ở /var/spool/cron/crontabs/root. Thêm 2 dòng sau vào cuối file trên
        0 3 * * * sudo shutdown -r
        * * * * * /usr/bin/python3 /home/szbaijie/hc_bin/check_network.py

# Compile python to binary .pyc: python3 -m compileall .

# Quy trình OTA HC
    + Force update:
        - Mỗi khi khởi động, HC sẽ lấy thông tin version mới từ trường hcforce của showdow: $aws/things/agency2022/Setting và so sánh với version của code hiện tại được define ở HC_VERSION trong file define.h. Nếu version hiện tại nhỏ hơn version mới thì tiến hành update. Version được đánh theo số ví dụ 1, 2, 12, 13,...
        - Firmware của HC gồm 5 file HG_AWS, HG_CORE, HG_BLE, HG_WIFI, HG_CFG được nén thành file zip và đặt tên là hc_bin_17.zip, trong đó 17 là version của HC. File zip này phải được đặt ở S3 tại đường dẫn: S3/Buckets/otable/hc_bin_17.zip. Lưu ý version trong tên file .zip phải trùng với macro HC_VERSION trong file define.h, nếu không HC sẽ liên tục check thấy có version mới mỗi lần khởi động lại


# Danh sách bản tin điều khiển từ App mobile:
1. Bản tin get log từ thiết bị:
    {
        "state": {
            "reported": {
                "sender": 1,
                "type": 39,
                "fileName": "log_core_24-08-2023.txt"
            }
        }
    }

# Convert epoch time to human readable time sqlite3
    SELECT DATETIME(ROUND(time / 1000), 'unixepoch') AS isodate FROM device_histories LIMIT 1;

# Crontab
nano /var/spool/cron/crontabs/root
Add the following lines to the end of file:
0 3 * * * sudo shutdown -r
* * * * * /usr/bin/python3 /home/szbaijie/hc_bin/checkWifi.py

#ngrok

cd ~
wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-arm64.tgz
sudo tar xvzf ./ngrok-v3-stable-linux-arm64.tgz -C /usr/local/bin
ngrok authtoken 2DZLHQZc0I2Xz914lFJn9b3Ncu4_7xfotkGuiaLsRM8uKtU5K
ngrok config edit
    version: "2"
    authtoken: 2DZLHQZc0I2Xz914lFJn9b3Ncu4_7xfotkGuiaLsRM8uKtU5K
    tunnels:
      device-ssh:
        proto: tcp
        addr: 22
ngrok service install --config $HOME/.config/ngrok/ngrok.yml
ngrok service start